// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/size12/gophkeeper/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// Storager is an autogenerated mock type for the Storager type
type Storager struct {
	mock.Mock
}

// CreateRecord provides a mock function with given fields: ctx, record
func (_m *Storager) CreateRecord(ctx context.Context, record entity.Record) (string, error) {
	ret := _m.Called(ctx, record)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Record) (string, error)); ok {
		return rf(ctx, record)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.Record) string); ok {
		r0 = rf(ctx, record)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.Record) error); ok {
		r1 = rf(ctx, record)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: credentials
func (_m *Storager) CreateUser(credentials entity.UserCredentials) error {
	ret := _m.Called(credentials)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.UserCredentials) error); ok {
		r0 = rf(credentials)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRecord provides a mock function with given fields: ctx, recordID
func (_m *Storager) DeleteRecord(ctx context.Context, recordID string) error {
	ret := _m.Called(ctx, recordID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, recordID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRecord provides a mock function with given fields: ctx, recordID
func (_m *Storager) GetRecord(ctx context.Context, recordID string) (entity.Record, error) {
	ret := _m.Called(ctx, recordID)

	var r0 entity.Record
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entity.Record, error)); ok {
		return rf(ctx, recordID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.Record); ok {
		r0 = rf(ctx, recordID)
	} else {
		r0 = ret.Get(0).(entity.Record)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, recordID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecordsInfo provides a mock function with given fields: ctx
func (_m *Storager) GetRecordsInfo(ctx context.Context) ([]entity.Record, error) {
	ret := _m.Called(ctx)

	var r0 []entity.Record
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]entity.Record, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []entity.Record); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Record)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginUser provides a mock function with given fields: credentials
func (_m *Storager) LoginUser(credentials entity.UserCredentials) (entity.UserID, error) {
	ret := _m.Called(credentials)

	var r0 entity.UserID
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.UserCredentials) (entity.UserID, error)); ok {
		return rf(credentials)
	}
	if rf, ok := ret.Get(0).(func(entity.UserCredentials) entity.UserID); ok {
		r0 = rf(credentials)
	} else {
		r0 = ret.Get(0).(entity.UserID)
	}

	if rf, ok := ret.Get(1).(func(entity.UserCredentials) error); ok {
		r1 = rf(credentials)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewStorager interface {
	mock.TestingT
	Cleanup(func())
}

// NewStorager creates a new instance of Storager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStorager(t mockConstructorTestingTNewStorager) *Storager {
	mock := &Storager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
