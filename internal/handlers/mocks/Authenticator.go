// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	entity "github.com/size12/gophkeeper/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// Authenticator is an autogenerated mock type for the Authenticator type
type Authenticator struct {
	mock.Mock
}

// CreateToken provides a mock function with given fields: userID
func (_m *Authenticator) CreateToken(userID entity.UserID) (entity.AuthToken, error) {
	ret := _m.Called(userID)

	var r0 entity.AuthToken
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.UserID) (entity.AuthToken, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(entity.UserID) entity.AuthToken); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(entity.AuthToken)
	}

	if rf, ok := ret.Get(1).(func(entity.UserID) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateToken provides a mock function with given fields: token
func (_m *Authenticator) ValidateToken(token entity.AuthToken) (entity.UserID, error) {
	ret := _m.Called(token)

	var r0 entity.UserID
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.AuthToken) (entity.UserID, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(entity.AuthToken) entity.UserID); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(entity.UserID)
	}

	if rf, ok := ret.Get(1).(func(entity.AuthToken) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAuthenticator interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuthenticator creates a new instance of Authenticator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuthenticator(t mockConstructorTestingTNewAuthenticator) *Authenticator {
	mock := &Authenticator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
